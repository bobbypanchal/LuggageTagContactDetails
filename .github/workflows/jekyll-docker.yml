name: Send Webhook Payload via Email  # Workflow name

on:  # Specifies the events that trigger this workflow
  workflow_dispatch:  # Allows manual triggering of the workflow
  repository_dispatch:  # Allows triggering via custom webhook event
    types:
      - webhook-event  # Type of repository dispatch event that triggers the workflow

jobs:
  process-and-email:
    runs-on: ubuntu-latest  # The workflow will execute on the latest version of Ubuntu

    steps:
      - name: Checkout code  # Step to check out the repository's code
        uses: actions/checkout@v3  # GitHub Action to check out the repository code

      - name: Set up Python  # Step to set up Python environment
        uses: actions/setup-python@v4  # GitHub Action to set up Python
        with:
          python-version: '3.x'  # Specifies the Python version to use

      - name: Install dependencies  # Step to install required Python dependencies
        run: |
          python -m pip install --upgrade pip  # Upgrades pip to the latest version
          pip install pyyaml  # Installs the `pyyaml` library

      - name: Extract payload  # Step to extract the payload from the event
        id: extract-payload  # Assigns an ID to this step for referencing later
        run: |
          echo "::set-output name=payload::${{ github.event.client_payload }}"  # Outputs the payload as a step output

      - name: Send email with formatted table  # Step to send the payload as an email
        env:
          ICLOUD_EMAIL: ${{ secrets.ICLOUD_EMAIL }}  # Fetches the iCloud email from secrets
          ICLOUD_PASSWORD: ${{ secrets.ICLOUD_PASSWORD }}  # Fetches the iCloud password from secrets
        run: |
          python <<EOF  # Runs the following Python script inline
          import smtplib
          from email.mime.text import MIMEText
          from email.mime.multipart import MIMEMultipart
          import json

          # Email credentials and recipient details
          sender = "${{ secrets.ICLOUD_EMAIL }}"
          password = "${{ secrets.ICLOUD_PASSWORD }}"
          recipient = "${{ secrets.ICLOUD_EMAIL }}"  # Sends email to the same iCloud email
          subject = "A Luggage tag was scanned"  # Subject of the email

          # Load the JSON payload passed from the event
          payload = json.loads('''${{ toJson(github.event.client_payload) }}''')

          # Generate an HTML table from the payload
          table_rows = "".join(
              f"<tr><td>{key}</td><td>{value}</td></tr>"
              for key, value in reversed(payload.items())
          )
          html_body = f"""
          <html>
              <body style="font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif; color: #333;">
                  <p style="font-size: 16px; line-height: 1.5; color: #555;">
                      Below is the scanned luggage tag information:
                  </p>
                  <table style="
                      border-collapse: collapse;
                      width: 100%;
                      max-width: 600px;
                      margin: 20px auto;
                      border: 1px solid #ddd;
                      box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                      border-radius: 8px;
                      overflow: hidden;
                  ">
                      <thead>
                          <tr style="
                              background-color: #f5f5f5;
                              border-bottom: 2px solid #ddd;
                          ">
                              <th style="
                                  text-align: left;
                                  padding: 12px 16px;
                                  font-size: 16px;
                                  font-weight: 600;
                                  color: #444;
                                  text-transform: uppercase;
                              ">
                                  Key
                              </th>
                              <th style="
                                  text-align: left;
                                  padding: 12px 16px;
                                  font-size: 16px;
                                  font-weight: 600;
                                  color: #444;
                                  text-transform: uppercase;
                              ">
                                  Value
                              </th>
                          </tr>
                      </thead>
                      <tbody>
                          {"".join(
                              f"""
                              <tr style="background-color: {'#ffffff' if i % 2 == 0 else '#f9f9f9'};">
                                  <td style="
                                      padding: 12px 16px;
                                      border-bottom: 1px solid #ddd;
                                      font-size: 14px;
                                      font-weight: 500;
                                      color: #555;
                                      text-transform: capitalize;
                                  ">
                                      {key.replace('_', ' ').capitalize()}
                                  </td>
                                  <td style="
                                      padding: 12px 16px;
                                      border-bottom: 1px solid #ddd;
                                      font-size: 14px;
                                      font-weight: 400;
                                      color: #333;
                                  ">
                                      {value}
                                  </td>
                              </tr>
                              """
                              for i, (key, value) in enumerate(reversed(payload.items()))
                          )}
                      </tbody>
                  </table>
              </body>
          </html>
          """


          # Create the email message with an HTML body
          msg = MIMEMultipart("alternative")
          msg["Subject"] = subject
          msg["From"] = sender
          msg["To"] = recipient
          msg.attach(MIMEText(html_body, "html"))

          try:
              # Connects to the iCloud SMTP server and sends the email
              with smtplib.SMTP("smtp.mail.me.com", 587) as server:
                  server.starttls()
                  server.login(sender, password)
                  server.sendmail(sender, recipient, msg.as_string())
                  print("Email sent successfully!")
          except Exception as e:
              print(f"Failed to send email: {e}")
          EOF
